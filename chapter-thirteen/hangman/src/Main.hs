module Main where

import Control.Monad (forever)
import Data.Char (toLower)
import Data.Maybe (isJust)
import Data.List (intersperse)
import System.Exit (exitSuccess)
import System.Random (randomRIO)

-- type synonym for a list of strings
type WordList = [String]

-- uses IO to read in the list of words
-- then uses lines to turn the input into a list based on newline characters
allWords :: IO WordList
allWords = do
  dict <- readFile "data/dict.txt"
  return (lines dict)

-- these set the min and max number of characters in a word, can be changed
minWordLength :: Int
minWordLength = 5

maxWordLength :: Int
maxWordLength = 9

-- filters our list of words based on whether they meet the above criteria
gameWords :: IO WordList
gameWords = do
  aw <- allWords
  return (filter gameLength aw)
  where gameLength w =
      let l = length (w :: String)
      in l >= minWordLength
          && l < maxWordLength

-- randomRIO takes random index between 0 and the length of the list
-- randomWord then returns the word at that position in the WordList
randomWord :: WordList -> IO String
randomWord wl = do
  randomIndex <- randomRIO (0, (length gameWords) - 1)
  return $ wl !! randomIndex

-- the >>= operator rmeans that the value generated by the first function becomes the argument for the second
randomWord' :: IO String
randomWord' = gameWords >>= randomWord

-- datatype to hold the puzzle
-- product of a String, list of Maybe Char, and a list of Char
data Puzzle = Puzzle String [Maybe Char] [Char]

-- instance of Show for the datatype, allowing us to print things to the screen how we want
-- don't want to show the guess so it's left out
-- intersperse discovered characters with spaces 
instance Show Puzzle where
  show (Puzzle _ discovered guessed) =
    (intersperse ' ' $
      fmap renderPuzzleChar discovered)
    ++ " Guessed so far: " ++ guessed

-- creates new Puzzle
-- coded by me
freshPuzzle :: String -> Puzzle
freshPuzzle word = Puzzle word (map (const Nothing) word) []

charInWord :: Puzzle -> Char -> Bool
charInWord (Puzzle word _ _) c = c `elem` word

alreadyGuessed :: Puzzle -> Char -> Bool
alreadyGuessed (Puzzle _ _ guessed) c = c `elem` guessed

renderPuzzleChar :: Maybe Char -> Char
renderPuzzleChar Nothing = '_'
renderPuzzleChar Maybe c = c

-- takes the current puzzle and the guess
-- creates the new filledInSoFar and adds the guess to the guessed list
-- zipper is a combining function 
-- if the current character in word is equal to guess then fills in that letter with Just wordChar
-- wordChar is characters in the puzzle word
-- guessChar is the guessed list
-- zipWith constructs a list based on the application of zipper to the two lists
-- zipper means that if the guess is correct, that entry will be replaced with the character
-- otherwise character will be Nothing
fillInCharacter :: Puzzle -> Char -> Puzzle
fillInCharacter (Puzzle word filledInSoFar s) c =
  Puzzle word newFilledInSoFar (c : s)
    where zipper guessed wordChar guessChar =
        if wordChar == guessed
        then Just wordChar
        else guessChar
      newFilledInSoFar =
        zipWith (zipper c)
          word filledInSoFar

-- uses case statement to handle the result of the guess
-- using a tuple containing the result of charInWord and alreadyGuessed
handleGuess :: Puzzle -> Char -> IO Puzzle
handleGuess puzzle guess = do
  putStrLn $ "Your guess was: " ++ [guess]
  case (charInWord puzzle guess, alreadyGuessed puzzle guess) of
    (_, True) -> do
      putStrLn "You already guessed that\
              \ character, pick \
              \ something else!"
      return puzzle
    (True, _) -> do
      putStrLn "This character was in the\
                \ word, filling in the word\
                \ accordingly"
      return (fillInCharacter puzzle guess)
    (False, _) -> do
      putStrLn -> "This character wasn't in\
                  \ the word, try again."
      return (fillInCharacter puzzle guess)

-- if number of guesses gets too high then user loses
-- changed it to make it so that only incorrect guesses count
gameOver :: Puzzle -> IO ()
gameOver (Puzzle wordToGuess filledInSoFar guessed) =
  if (length guessed - length (filter isJust filledInSoFar)) > 7 then
    do putStrLn "You lose!"
        putStrLn $
          "The word was: " ++ wordToGuess
        exitSuccess
  else return ()

-- checks if game is one by checking if the filledInSoFar contains no Nothings
gameWin :: Puzzle -> IO ()
gameWin (Puzzle _ filledInSoFar _) =
  if all isJust filledInSoFar then
    do putStrLn "You win!"
      exitSuccess
  else return ()

-- runs the game using do syntax to run all these functions
runGame :: Puzzle -> IO ()
runGame puzzle = forever $ do
  gameOver puzzle
  gameWin puzzle
  putStrLn $
    "Current puzzle is: " ++ show puzzle
  guess <- getLine
  case guess of
    [c] -> handleGuess puzzle c >>= runGame
    _ ->
      putStrLn "Your guess must\
                \ be a single character"

-- sets up game by selecting a random word, initializing puzzle, and running the game
main :: IO ()
main = do
  word <- randomWord'
  let puzzle =
    freshPuzzle (fmap toLower word)
  runGame puzzle
